if ("undefined" == typeof jQuery)
	throw new Error("MultiTabs requires jQuery");
!function (a) {
	"use strict";
	var c,
	b = ".multitabs",
	e = function (a, c, d, e, f) {
		var g = f ? c : c.split(" ").join(b + " ") + b;
		"string" != typeof d && (e = e || d, d = ""),
		a.off(g, d, e).on(g, d, e)
	},
	f = function (a, b) {
		return "main" === a || "editor" === a ? 0 : (b = b || 8, c = c || 0, c++, c %= b)
	},
	k = function (b, c) {
		var d,
		e,
		f,
		g;
		for (c = c || q.maxTabTitleLength, d = b.split(" "), e = "", f = 0; f < d.length; f++)
			g = a.trim(d[f]), e += g ? g + " " : "";
		return e.length > c && (e = e.substr(0, c), e += "..."),
		e
	},
	j = function (b) {
		var c = 0;
		return a(b).each(function () {
			c += a(this).outerWidth(!0)
		}),
		c
	},
	i = function (a) {
		var b = function (a) {
			var b = document.createElement("a");
			return b.href = a,
			b.href
		}
		(a),
		c = window.location.protocol + "//" + window.location.host + "/",
		d = b.substr(0, c.length);
		return !(d === c)
	},
	l = function (a, b, c) {
		var d = document.styleSheets[0];
		c = c || 0,
		d.insertRule ? d.insertRule(a + "{" + b + "}", c) : d.addRule && d.addRule(a, b, c)
	},
	g = function (a) {
		return a.replace(/\./g, "").replace(/([A-Z])/g, "-$1").toLowerCase()
	},
	m = {
		main : '<div class="mt-tab-wrapper {mainClass}" style="height: 100%;" >   <div class="mt-tab-header" style="background-color : {backgroundColor};">       <div class="mt-tab-tools-left">           <ul  class="nav nav-tabs">               <li class="mt-move-left"><a><i class="fa fa-backward"></i></a></li>           </ul>       </div>       <nav class="mt-tab-panel">           <ul  class="nav nav-tabs">    <li><a href="#welcome_to_use_multitabs"  data-content="main" data-index="0" data-id="welcome_to_use_multitabs"> Home </a></li>           </ul>       </nav>       <div class="mt-tab-tools-right" style="background-color : {backgroundColor};">           <ul  class="nav nav-tabs">               <li class="mt-move-right"><a><i class="fa fa-forward"></i></a></li>               <li class="mt-dropdown-option dropdown">                   <a href="#"  class="dropdown-toggle" data-toggle="dropdown">{option}<span class="caret"></span></a>                   <ul role="menu" class="dropdown-menu dropdown-menu-right">                       <li class="mt-show-actived-tab"><a>{showActivedTab}</a></li>                       <li class="divider"></li>                       <li class="mt-close-all-tabs"><a>{closeAllTabs}</a></li>                       <li class="mt-close-other-tabs"><a>{closeOtherTabs}</a></li>                   </ul>               </li>           </ul>       </div>   </div>   <div class="tab-content mt-tab-content" >  <div class="tab-pane active"  data-content="main" data-index="0" data-id="welcome_to_use_multitabs"><h1>Demo page</h1><h2>Welcome to use bootstrap multi-tabs :) </h2></div> </div></div>',
		tab : '<a href="{href}"  data-content="{content}" data-index="{index}" data-id="{did}">{title}{closeBtn}</a>',
		closeBtn : ' <i class="fa fa-times"></i>',
		ajaxTabPane : '<div class="tab-pane {class}"  data-content="{content}" data-index="{index}" data-id="{did}"></div>',
		iframeTabPane : '<iframe class="tab-pane {class}"  width="100%" height="100%" frameborder="0" src="" data-content="{content}" data-index="{index}" data-id="{did}" seamless></iframe>'
	},
	n = {
		title : "Tab",
		option : "Option",
		showActivedTab : "Show Activated Tab",
		closeAllTabs : "Close All Tabs",
		closeOtherTabs : "Close Other Tabs",
		unsaveEditorWarning : "Your data is not save, are you sure to lose it?"
	},
	q = {
		"class" : "",
		maxTabs : 8,
		maxTabTitleLength : 25
	},
	o = {
		"class" : ""
	},
	p = {
		"class" : "",
		otherHeight : 0
	},
	d = function (b, c) {
		var d = this;
		d.$element = a(b),
		d._validate() && (d._init(c), d._listen(), d._finish())
	};
	d.prototype = {
		constructor : d,
		_init : function (a) {
			var d,
			e,
			b = this,
			c = b.$element;
			c.html(a.layoutTemplates.main.replace("{mainClass}", g(a.class)).replace(/\{backgroundColor\}/g, a.backgroundColor).replace("{option}", a.language.option).replace("{showActivedTab}", a.language.showActivedTab).replace("{closeAllTabs}", a.language.closeAllTabs).replace("{closeOtherTabs}", a.language.closeOtherTabs)),
			c.tabHeader = c.find(".mt-tab-header:first"),
			c.tabToolsLeft = c.tabHeader.find(".mt-tab-tools-left:first ul"),
			c.tabPanel = c.tabHeader.find(".mt-tab-panel:first ul"),
			c.tabToolsRight = c.tabHeader.find(".mt-tab-tools-right:first ul"),
			c.tabContent = c.find(".tab-content:first"),
			a.tabHeader.maxTabs <= 1 && (a.tabHeader.maxTabs = 1, c.tabHeader.hide()),
			d = c.tabHeader.find(".mt-tab-tools-left:visible:first").outerWidth(!0) + c.tabHeader.find(".mt-tab-tools-right:visible:first").outerWidth(!0),
			c.tabPanel.parent(".mt-tab-panel").css("width", "calc(100% - " + d + "px)"),
			a.fixed && (c.addClass("mt-fixed"), b._fixedTabHeader()),
			e = parseInt(a.iframeTabPane.otherHeight),
			c.tabContent.css("height", "calc(100% - " + e + "px)"),
			b.options = a
		},
		_finish : function () {
			var f,
			a = this,
			b = a.$element,
			c = a.options,
			d = c.main.url,
			e = c.main.title || c.tabHeader.title;
			if (d) {
				if (i(d))
					throw new Error("Main Tab can not use external page!");
				f = {
					url : d,
					title : e,
					iframe : !1,
					content : "main"
				},
				a.create(f)
			}
			b.tabPanel.find("li.active").length || window.location.hash.substr(1) || a.active(b.tabPanel.find('[data-content="main"]:first').parent("li"))
		},
		_validate : function () {
			var b,
			a = this;
			return 1 == a.$element.length ? !0 : (b = '<div class="help-block alert alert-warning"><h4>Duplicate Instance</h4>MultiTabs only can be 1 Instance.</div>', a.$element.after(b), !1)
		},
		_listen : function () {
			var b = this,
			c = b.$element,
			d = b.options;
			e(a(document), "click", d.link, function () {
				var a,
				c;
				event.preventDefault(),
				a = b._check(this),
				a && (c = b.create(a)),
				c && b.active(c)
			}),
			e(a(document), "click", ".mt-tab-panel a", function () {
				event.preventDefault(),
				b.active(a(this).parents("li:first"))
			}),
			e(a(document), "click", ".mt-tab-panel a i", function () {
				return event.preventDefault(),
				b.close(a(this).parents("li:first")),
				!1
			}),
			e(c.tabToolsLeft.find(".mt-move-left:first"), "click", function () {
				event.preventDefault(),
				b._moveLeft()
			}),
			e(c.tabToolsRight.find(".mt-move-right:first"), "click", function () {
				event.preventDefault(),
				b._moveRight()
			}),
			e(c.tabToolsRight.find(".mt-show-actived-tab:first"), "click", function () {
				event.preventDefault(),
				b._showActive()
			}),
			e(c.tabToolsRight.find(".mt-close-all-tabs:first"), "click", function () {
				event.preventDefault(),
				b._closeAll()
			}),
			e(c.tabToolsRight.find(".mt-close-other-tabs:first"), "click", function () {
				event.preventDefault(),
				b._closeOthers()
			}),
			e(a(window), "beforeunload", function () {
				return c.tabContent.find('.tab-pane[data-content="editor"]').hasClass("unsave") ? d.language.unsaveEditorWarning : void 0
			}),
			d.showHash && e(a(window), "hashchange load", function () {
				var a,
				d,
				e,
				f,
				g,
				h;
				return event.preventDefault(),
				(a = window.location.hash) ? (d = a.replace("#", ""), e = c.tabPanel.find('[data-id="' + d + '"]:first'), e.length ? !1 : (f = document.createElement("a"), f.href = d, g = b._check(f), g && (h = b.create(g)), h && b.active(h), void 0)) : !1
			})
		},
		_getParam : function (b) {
			var f,
			c = this,
			e = (c.$element, c.options);
			return f = a(b).data() || {},
			f.url = f.url || a(b).attr("href"),
			f.url = decodeURIComponent(f.url.replace("#", "")),
			0 == a.trim(f.url).length ? !1 : (f.iframe = f.iframe || i(f.url) || e.iframe, (f.iframe || void 0 == f.content) && (f.content = e.content), f.title = f.title || a(b).text() || f.url.replace("http://", "").replace("https://", "") || e.language.title, f.title = k(f.title, e.tabHeader.maxTabTitleLength), f)
		},
		_check : function (a) {
			var e,
			f,
			b = this,
			c = b.$element;
			return b.options,
			(e = b._getParam(a)) ? (f = c.tabPanel.find('a[data-id="' + e.url + '"][data-content="' + e.content + '"]').parent("li"), b.active(f) ? !1 : e) : !1
		},
		create : function (a) {
			var g,
			h,
			i,
			j,
			k,
			l,
			m,
			b = this,
			c = b.options,
			d = b.$element,
			e = d.tabContent.find('.tab-pane[data-content="editor"]');
			return "editor" == a.content && e.length && e.hasClass("unsave") ? (alert("Please colse or save the Editor before open the other!"), b.active(d.tabPanel.find('a[data-content="editor"]').parent("li")), !1) : (k = f(a.content, c.tabHeader.maxTabs), h = "main" === a.content ? "" : c.layoutTemplates.closeBtn, g = c.layoutTemplates.tab.replace("{href}", "#" + a.url).replace("{content}", a.content).replace("{index}", k).replace("{did}", a.url).replace("{title}", a.title).replace("{closeBtn}", h), l = d.tabPanel.find('a[data-content="' + a.content + '"][data-index="' + k + '"]').parent("li"), l.length ? l.html(g) : d.tabPanel.append("<li>" + g + "</li>"), j = void 0 === a.iframe ? c.iframe : a.iframe, i = j ? c.layoutTemplates.iframeTabPane.replace("{class}", c.iframeTabPane.class) : c.layoutTemplates.ajaxTabPane.replace("{class}", c.ajaxTabPane.class), i = i.replace("{content}", a.content).replace("{index}", k).replace("{did}", a.url), d.tabContent.find('.tab-pane[data-content="' + a.content + '"][data-index="' + k + '"]').remove(), d.tabContent.append(i), m = d.tabContent.find('.tab-pane[data-content="' + a.content + '"][data-index="' + k + '"]'), b._fixTabContentLayout(m), j ? setTimeout(function () {
					m.attr("src", a.url)
				}, 300) : m.load(a.url), d.tabPanel.find('a[data-content="' + a.content + '"][data-index="' + k + '"]').parent("li"))
		},
		_fixTabPosition : function (b) {
			var n,
			c = this,
			d = c.$element,
			e = a(b).outerWidth(!0),
			f = a(b).next().outerWidth(!0),
			g = a(b).prev().outerWidth(!0),
			h = j(a(b).prevAll()),
			i = j(a(b).nextAll()),
			k = d.tabPanel.outerWidth(!0),
			l = j(d.tabPanel.find("li")),
			m = 0;
			if (k > l)
				m = 0;
			else if (k - e - f >= i) {
				if (k - f > i)
					for (m = h, n = b; m - a(n).outerWidth() > l - k; )
						m -= a(n).prev().outerWidth(), n = a(n).prev()
			} else
				h > k - e - g && (m = h - g);
			d.tabPanel.animate({
				marginLeft : 0 - m + "px"
			}, "fast")
		},
		_moveLeft : function () {
			var h,
			i,
			b = this,
			c = b.$element,
			d = Math.abs(parseInt(c.tabPanel.css("margin-left"))),
			e = c.tabPanel.outerWidth(!0),
			f = j(c.tabPanel.find("li")),
			g = 0;
			if (e > f)
				return !1;
			for (h = c.tabPanel.find("li:first"), i = 0; i + h.width() <= d; )
				i += h.outerWidth(!0), h = a(h).next();
			if (i = 0, j(a(h).prevAll()) > e) {
				for (; i + h.width() < e && h.length > 0; )
					i += h.outerWidth(!0), h = a(h).prev();
				g = j(a(h).prevAll())
			}
			c.tabPanel.animate({
				marginLeft : 0 - g + "px"
			}, "fast")
		},
		_moveRight : function () {
			var h,
			i,
			b = this,
			c = b.$element,
			d = Math.abs(parseInt(c.tabPanel.css("margin-left"))),
			e = c.tabPanel.outerWidth(!0),
			f = j(c.tabPanel.find("li")),
			g = 0;
			if (e > f)
				return !1;
			for (h = c.tabPanel.find("li:first"), i = 0; i + h.width() <= d; )
				i += h.outerWidth(!0), h = a(h).next();
			for (i = 0; i + h.width() < e && h.length > 0; )
				i += h.outerWidth(!0), h = a(h).next();
			g = j(a(h).prevAll()),
			g > 0 && c.tabPanel.animate({
				marginLeft : 0 - g + "px"
			}, "fast")
		},
		close : function (b) {
			var c = this,
			d = c.$element,
			e = a(b),
			f = e.children("a:first"),
			g = f.attr("href").replace("#", ""),
			h = f.attr("data-content");
			return "editor" == f.attr("data-content") && d.tabContent.find('.tab-pane[data-content="editor"]').hasClass("unsave") && !c._unsaveConfirm() ? !1 : (e.hasClass("active") && (e.next("li").size() ? c.active(e.next("li:first")) : e.prev("li").size() && c.active(e.prev("li:last"))), e.remove(), d.tabContent.find('.tab-pane[data-content="' + h + '"][data-id="' + g + '"]:first').remove(), void 0)
		},
		_closeOthers : function () {
			var b = this,
			c = b.$element;
			c.tabPanel.find("li:not(.active)").find('a:not([data-content="main"]):not([data-content="editor"])').each(function () {
				var b = a(this),
				d = b.attr("href").replace("#", ""),
				e = b.attr("data-content");
				c.tabContent.find('.tab-pane[data-content="' + e + '"][data-id="' + d + '"]:first').remove(),
				b.parent("li").remove()
			}),
			c.tabPanel.css("margin-left", "0")
		},
		_showActive : function () {
			var a = this,
			b = a.$element,
			c = b.tabPanel.find("li.active:first");
			a._fixTabPosition(c)
		},
		_closeAll : function () {
			var b = this,
			c = b.$element;
			c.tabPanel.find('a:not([data-content="main"]):not([data-content="editor"])').each(function () {
				var b = a(this),
				d = b.parent("li"),
				e = b.attr("href").replace("#", ""),
				f = b.attr("data-content");
				c.tabContent.find('.tab-pane[data-content="' + f + '"][data-id="' + e + '"]:first').remove(),
				d.remove()
			}),
			b.active(c.tabPanel.find('a[data-content="main"]:first').parent("li"))
		},
		active : function (b) {
			var g,
			h,
			i,
			j,
			c = this,
			d = c.$element,
			e = c.options,
			f = a(b);
			return f.length ? (g = f.find("a:first"), h = g.attr("href").replace("#", ""), i = g.attr("data-content"), j = d.tabContent.find('.tab-pane[data-content="' + i + '"][data-id="' + h + '"]:first'), j.length ? (f.hasClass("active") || (f.addClass("active").siblings().removeClass("active"), c._fixTabPosition(f)), j.hasClass("active") || (j.addClass("active").siblings().removeClass("active"), c._fixTabContentLayout(j)), e.showHash && h && (window.location.hash = "#" + h), !0) : !1) : !1
		},
		_fixedTabHeader : function () {
			var b = this,
			c = b.$element,
			d = c.position(),
			e = d.top + parseInt(c.css("marginTop").replace("px", "")) + parseInt(c.css("borderTop").replace("px", "")) + parseInt(c.css("paddingTop").replace("px", "")),
			f = a(window).width() - d.left - c.outerWidth(!0),
			g = c.tabHeader.outerHeight(!0),
			h = parseInt(c.tabContent.css("paddingTop"));
			l(".mt-fixed .mt-tab-header", "position : fixed; top : " + e + "px; left : auto;"),
			l(".mt-fixed .mt-tab-tools-right", "position : fixed; top : " + e + "px; right : " + f + "px;"),
			l(".mt-fixed .mt-tab-content", "padding-top : " + h + g + "px;")
		},
		_fixTabContentLayout : function (b) {
			var c = this,
			d = c.$element,
			e = c.options,
			f = a(b);
			f.is("iframe") ? (d.removeClass("mt-fixed"), a("body").addClass("full-height-layout")) : (e.fixed && d.addClass("mt-fixed"), a("body").removeClass("full-height-layout"))
		},
		_unsaveConfirm : function () {
			var a = this,
			b = a.options;
			return confirm(b.language.unsaveEditorWarning)
		}
	},
	a.fn.multitabs = function (b) {
		var c = Array.apply(null, arguments),
		e = [];
		switch (c.shift(), a(this).each(function () {
				var i,
				f = a(this),
				g = f.data("multitabs"),
				h = "object" == typeof b && b;
				g || (i = a.extend(!0, {}, a.fn.multitabs.defaults, h, f.data()), g = new d(this, i), f.data("multitabs", g)),
				"string" == typeof b && e.push(g[b].apply(g, c))
			}), e.length) {
		case 0:
			return this;
		case 1:
			return e[0];
		default:
			return e
		}
	},
	a.fn.multitabs.defaults = {
		main : {
			title : "",
			url : ""
		},
		fixed : !0,
		backgroundColor : "#fff",
		showHash : !0,
		content : "info",
		link : ".multi-tabs",
		"class" : "",
		iframe : !1,
		tabHeader : q,
		ajaxTabPane : o,
		iframeTabPane : p,
		layoutTemplates : m,
		language : n
	}
}
(jQuery);
